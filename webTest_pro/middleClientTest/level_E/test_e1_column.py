# coding=utf-8import osimport sysimport unittestfrom time import sleepfrom selenium import webdriversys.path.append(os.environ.get('PY_DEV_HOME'))from webTest_pro.common.initData import initfrom webTest_pro.common.model.baseActionAdd import user_login, add_columnfrom webTest_pro.common.model.baseActionModify import update_columnfrom webTest_pro.common.model.baseActionSearch import search_columnreload(sys)sys.setdefaultencoding("utf-8")columnData = [{ "navigationName_add":u"测试栏目名", "url_add":"10.1.0.19", "navTypeAdd":u"页眉导航", 'sort_add': '11', 'remark_add': u'测试描述' }]class column(unittest.TestCase):    ''''栏目管理'''    def setUp(self):        if init.execEnv['execType'] == 'local':            print "\n", "=" * 20, "local exec testcase", "=" * 19            self.driver = webdriver.Chrome()            self.driver.implicitly_wait(8)            self.verificationErrors = []            self.accept_next_alert = True            print "start column..."        else:            print "\n", "=" * 20, "remote exec testcase", "=" * 18            browser = webdriver.DesiredCapabilities.CHROME            self.driver = webdriver.Remote(command_executor=init.execEnv['remoteUrl'], desired_capabilities=browser)            self.driver.implicitly_wait(8)            self.verificationErrors = []            self.accept_next_alert = True            print "start column..."    def tearDown(self):        self.driver.quit()        self.assertEqual([], self.verificationErrors)        print "column end!"        print "=" * 60    def test_add_Column(self):        '''添加栏目管理'''        print "exec：test_add_Column..."         driver = self.driver        user_login(driver, **init.loginInfo)         for itme in columnData:            add_column(driver, **itme)            search_column(driver, **itme)        print "exec：test_add_Column success."#             def test_bupdate_Column(self):        '''修改栏目管理'''        print "exec：test_bupdate_Column..."         driver = self.driver        user_login(driver, **init.loginInfo)         for itme in columnData:            update_column(driver, **itme)        sleep(0.5)        print "exec：test_bupdate_Column success."if __name__ == '__main__':    unittest.main()#     driver = webdriver.Chrome()#     user_login(driver, **init.loginInfo)# #     for itme in announcementData:#             search_announcement(driver, **itme)