# coding=utf-8import osimport sysimport unittestfrom time import sleepfrom selenium import webdriversys.path.append(os.environ.get('PY_DEV_HOME'))from webTest_pro.common.initData import initfrom webTest_pro.common.model.baseActionAdd import user_login, add_announcementfrom webTest_pro.common.model.baseActionModify import update_announcementfrom webTest_pro.common.model.baseActionSearch import search_announcementreload(sys)sys.setdefaultencoding("utf-8")announcementData = [{ "add_title":u"测试公告", "noticeType_select":u"网站公告", "schoolName_select":u"河南省教育局", 'disk': 'Z:\\testResource\py\pic', 'fileNames': 'banner01.jpg' }]class announcement(unittest.TestCase):    ''''公告管理'''    def setUp(self):        if init.execEnv['execType'] == 'local':            print "\n", "=" * 20, "local exec testcase", "=" * 19            self.driver = webdriver.Chrome()            self.driver.implicitly_wait(8)            self.verificationErrors = []            self.accept_next_alert = True            print "start announcement..."        else:            print "\n", "=" * 20, "remote exec testcase", "=" * 18            browser = webdriver.DesiredCapabilities.CHROME            self.driver = webdriver.Remote(command_executor=init.execEnv['remoteUrl'], desired_capabilities=browser)            self.driver.implicitly_wait(8)            self.verificationErrors = []            self.accept_next_alert = True            print "start announcement..."    def tearDown(self):        self.driver.quit()        self.assertEqual([], self.verificationErrors)        print "announcement end!"        print "=" * 60    def test_add_Announcement(self):        '''添加公告管理'''        print "exec：test_add_Announcement..."        driver = self.driver        user_login(driver, **init.loginInfo)        for itme in announcementData:            add_announcement(driver, **itme)            search_announcement(driver, **itme)        sleep(0.5)        print "exec：test_add_Announcement success."            def test_bupdate_Announcement(self):        '''修改公告管理'''        print "exec：test_bupdate_Announcement..."        driver = self.driver        user_login(driver, **init.loginInfo)        for itme in announcementData:            update_announcement(driver, **itme)        sleep(0.5)        print "exec：test_bupdate_Announcement success."if __name__ == '__main__':    unittest.main()