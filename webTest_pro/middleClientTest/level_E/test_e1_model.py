# coding=utf-8import osimport sysimport unittestfrom time import sleepfrom selenium import webdriversys.path.append(os.environ.get('PY_DEV_HOME'))from webTest_pro.common.initData import initfrom webTest_pro.common.model.baseActionAdd import user_login, add_modelfrom webTest_pro.common.model.baseActionModify import update_modelfrom webTest_pro.common.model.baseActionSearch import search_modelfrom webTest_pro.common.model.baseActionDel import del_modelreload(sys)sys.setdefaultencoding("utf-8")modelData = [{ "addname":u"测试名称", "addurl":u"测试地址", "addremark":u"测试描述", 'addnId': u'在线课堂' }]class model(unittest.TestCase):    ''''栏目管理'''    def setUp(self):        if init.execEnv['execType'] == 'local':            print "\n", "=" * 20, "local exec testcase", "=" * 19            self.driver = webdriver.Chrome()            self.driver.implicitly_wait(8)            self.verificationErrors = []            self.accept_next_alert = True            print "start model..."        else:            print "\n", "=" * 20, "remote exec testcase", "=" * 18            browser = webdriver.DesiredCapabilities.CHROME            self.driver = webdriver.Remote(command_executor=init.execEnv['remoteUrl'], desired_capabilities=browser)            self.driver.implicitly_wait(8)            self.verificationErrors = []            self.accept_next_alert = True            print "start model..."    def tearDown(self):        self.driver.quit()        self.assertEqual([], self.verificationErrors)        print "model end!"        print "=" * 60    def test_add_model(self):        '''添加栏目管理'''        print "exec：test_add_model..."           driver = self.driver        user_login(driver, **init.loginInfo)           for itme in modelData:            add_model(driver, **itme)            search_model(driver, **itme)        print "exec：test_add_model success."             def test_bupdate_model(self):        '''修改栏目管理'''        print "exec：test_bupdate_model..."           driver = self.driver        user_login(driver, **init.loginInfo)           for itme in modelData:            update_model(driver, **itme)        print "exec：test_bupdate_model success."             def test_cdel_model(self):        '''修改栏目管理'''        print "exec：test_cdel_model..."          driver = self.driver        user_login(driver, **init.loginInfo)          for itme in modelData:            del_model(driver, **itme)        print "exec：test_cdel_model success."if __name__ == '__main__':    unittest.main()#     driver = webdriver.Chrome()#     user_login(driver, **init.loginInfo)# #     for itme in announcementData:#             search_announcement(driver, **itme)